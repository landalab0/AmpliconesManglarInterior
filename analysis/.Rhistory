full_core_data <- fromList(list_core_full)
# UpSet plot
upset_full_depth <- upset(full_core_data, decreasing = T, order.by = "freq", keep.order = TRUE, main.bar.color = "black", sets.bar.color = depth_colors, query.legend = "top", point.size = 4, line.size = 1, mainbar.y.label = "Shared ASV's",sets.x.label = "ASV's per Depth",text.scale = c(1.6, 1.3, 1.6, 1.3, 1.3, 1.3),queries = list(
list(query = intersects, params = list("0-15"), color = "#f5e5c4", active = T, query.name="0-15"),
list(query = intersects, params = list("16-30"), color = "#baa179", active = T, query.name="16-30"),
list(query = intersects, params = list("31-45"), color = "#a67451", active = T, query.name="31-45"),
list(query = intersects, params = list("50-75"), color = "#80673b", active = T, query.name="50-75"),
list(query = intersects, params = list("0-15", "16-30", "31-45", "50-75"), color = "#FFD700FF", active = T,query.name="Core")))
upset_full_depth
upset_full_depth
library(UpSetR)
library(ggplotify)
# Convert UpSetR  fromList
full_core_data <- fromList(list_core_full)
# UpSet plot
upset_full_depth <- upset(full_core_data, decreasing = T, order.by = "freq", keep.order = TRUE, main.bar.color = "black", sets.bar.color = c("#80673b","#a67451","#baa179","#f5e5c4"), query.legend = "top", point.size = 4, line.size = 1, mainbar.y.label = "Shared ASV's",sets.x.label = "ASV's per Depth",text.scale = c(1.6, 1.3, 1.6, 1.3, 1.3, 1.3),queries = list(
list(query = intersects, params = list("0-15"), color = "#f5e5c4", active = T, query.name="0-15"),
list(query = intersects, params = list("16-30"), color = "#baa179", active = T, query.name="16-30"),
list(query = intersects, params = list("31-45"), color = "#a67451", active = T, query.name="31-45"),
list(query = intersects, params = list("50-75"), color = "#80673b", active = T, query.name="50-75"),
list(query = intersects, params = list("0-15", "16-30", "31-45", "50-75"), color = "#FFD700FF", active = T,query.name="Core")))
upset_full_depth
upset_full_depth
library(UpSetR)
library(ggplotify)
# Convert UpSetR  fromList
full_core_data <- fromList(list_core_full)
# UpSet plot
upset_full_depth <- upset(full_core_data, decreasing = T, order.by = "freq", keep.order = TRUE, main.bar.color = "black", sets.bar.color = c("#80673b","#a67451","#baa179","#f5e5c4"), query.legend = "top", point.size = 4, line.size = 1, mainbar.y.label = "Shared ASV's",sets.x.label = "ASV's per Depth",text.scale = c(1.6, 1.3, 1.6, 1.3, 1.3, 1.3),queries = list(
list(query = intersects, params = list("0-15"), color = "#f5e5c4", active = T, query.name="0-15"),
list(query = intersects, params = list("16-30"), color = "#baa179", active = T, query.name="16-30"),
list(query = intersects, params = list("31-45"), color = "#a67451", active = T, query.name="31-45"),
list(query = intersects, params = list("50-75"), color = "#80673b", active = T, query.name="50-75"),
list(query = intersects, params = list("0-15", "16-30", "31-45", "50-75"), color = "#FFD700FF", active = T,query.name="Core")))
upset_full_depth
pdf("../results/plots/upsdepth.pdf")
upset_full_depth
dev.off()
library(UpSetR)
library(ggplotify)
# Convert UpSetR  fromList
full_core_data <- fromList(list_core_full)
# UpSet plot
upset_full_depth <- as.ggplot(upset(full_core_data, decreasing = T, order.by = "freq", keep.order = TRUE, main.bar.color = "black", sets.bar.color = c("#80673b","#a67451","#baa179","#f5e5c4"), query.legend = "top", point.size = 4, line.size = 1, mainbar.y.label = "Shared ASV's",sets.x.label = "ASV's per Depth",text.scale = c(1.6, 1.3, 1.6, 1.3, 1.3, 1.3),queries = list(
list(query = intersects, params = list("0-15"), color = "#f5e5c4", active = T, query.name="0-15"),
list(query = intersects, params = list("16-30"), color = "#baa179", active = T, query.name="16-30"),
list(query = intersects, params = list("31-45"), color = "#a67451", active = T, query.name="31-45"),
list(query = intersects, params = list("50-75"), color = "#80673b", active = T, query.name="50-75"),
list(query = intersects, params = list("0-15", "16-30", "31-45", "50-75"), color = "#FFD700FF", active = T,query.name="Core"))))
upset_full_depth
# pdf("../results/plots/upsdepth.pdf")
# upset_full_depth
# dev.off()
upset_full_depth
upsets_plots <- plot_grid(upset_full_sites,upset_full_depth, ncol = 2, labels = c("C", "D"))
upsets_plots
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1, rel_heights = c(2,0.8)  )
nmdss_upset
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1, rel_heights = c(2,1.5)  )
nmdss_upset
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1, rel_heights = c(2,1.1)  )
nmdss_upset
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1)
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1, rel_heights = c(2,1.1)  )
nmdss_upset
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1, rel_heights = c(1,0.8)  )
nmdss_upset
nmdss_upset <- plot_grid(nmdss_uu_wu,upsets_plots, ncol = 1, rel_heights = c(1.2,0.8)  )
nmdss_upset
upsets_plots
nmdss_uu_wu_sinperm <- plot_grid(nmds_wu,nmds_u, ncol = 1, labels = c("A", "B"))
nmdss_uu_wu_sinperm
nmdss_uu_wu_sinperm <- plot_grid(nmds_u,nmds_wu, ncol = 2, labels = c("A", "B"))
nmdss_uu_wu_sinperm
# Combine plots
upsets_plots <- plot_grid(upset_full_sites,upset_full_depth, ncol = 2, labels = c("C", "D"))
upsets_plots
upsets_plots
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(1,0.8))
nmdss_upsets
nmdss_upsets
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(1.1,0.8), rel_widths = c(1,1.2))
nmdss_upsets
nmdss_upsets
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(1.2,0.8), rel_widths = c(1,1.3))
nmdss_upsets
nmdss_upsets
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(2,1.5), rel_widths = c(1,1.6))
nmdss_upsets
nmdss_upsets
pdf("results/")
pdf("results/plots/nmds_upsets_comb.pdf")
nmdss_upsets
dev.off()
ggsave("results/plots/nmds_upsets_comb_fmt.pdf", plot = nmdss_upsets, width = 12, height = 10)
ggsave("../results/plots/nmds_upsets_comb_fmt.pdf", plot = nmdss_upsets, width = 12, height = 10)
nmdss_upsets
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(2.2,1.5), rel_widths = c(1,2))
nmdss_upsets
nmdss_upsets
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(2.3,1.5))
nmdss_upsets
nmdss_upsets
# Combine plots
nmdss_upsets <- plot_grid(nmdss_uu_wu_sinperm,upsets_plots, ncol = 1, rel_heights = c(2.3,1.7))
nmdss_upsets
nmdss_upsets
nmds_u
combined_plot_u
ggsave("../results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u)
ggsave("results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u)
ggsave("results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u,  width = 7, height = 9)
ggsave("results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u,  width = 7, height = 8)
ggsave("results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u,  width = 8, height = 8)
ggsave("results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u,  width = 8.5, height = 8)
ggsave("results/plots/nmds_unifrac_permanova.pdf", plot = combined_plot_u,  width = 8.5, height = 8, bg='transparent')
combined_plot_wu
ggsave("results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 8.5, height = 8, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 8.5, height = 8, bg='transparent')
scores(envfit_resultwu, display = "vectors")
top_asvswu[order(envfit_resultwu$vectors$r), ][1:12, ]
top_asvswu <- scores(envfit_resultwu, display = "vectors")
head(top_asvswu)
tail(top_asvswu)
#phylogenetic
library(ggplot2)
library(ggsci)
library(phyloseq)
library(vegan)
library(ggrepel)
# NMDS wu
nmds_wunifrac <- ordinate(ps, method = "NMDS", distance = "wunifrac")
# stress variable
var_stress_nmds_wu <- round(nmds_wunifrac$stress, 5)
var_stress_nmds_wu
# Calcular los vectores de ASVs usando envfit
asv_matrix <- as(otu_table(ps), "matrix")
asv_matrix <- t(asv_matrix) #
#envfit_resultwu <- envfit(nmds_wunifrac, asv_matrix, permutations = 999)
# Extraer los 10 ASVs más significativos
top_asvswu <- scores(envfit_resultwu, display = "vectors")
top_asvswu <- top_asvswu[order(envfit_resultwu$vectors$r), ][1:16, ]
top_asvswu
# Escalar los vectores para hacerlos más visibles
scale_factor <- 1.5
top_asvs_scaledwu <- top_asvswu * scale_factor
top_asvs_scaledwu <- as.data.frame(top_asvs_scaledwu)
top_asvs_scaledwu$ASV <- rownames(top_asvs_scaledwu)
# Obtener la taxonomía de los ASVs
tax_table <- as.data.frame(tax_table(ps))
tax_table$ASV <- rownames(tax_table$Family)
# Verificar la estructura en tax_table
tax_table_subsetwu <- tax_table(ps)[rownames(top_asvswu), ]
tax_table_subsetwu <- as.data.frame(tax_table_subsetwu)
print(tax_table_subsetwu)
# Extraer los nombres de los taxones de nivel más bajo para los top 10 ASVs
top_asvs_scaledwu$Taxon <- (tax_table_subsetwu$Family)
# Verificar los nombres de taxones en top_asvs_scaled
print(top_asvs_scaledwu)
# Convertir Depth_cm en un factor con niveles definidos
sample_data(ps)$Depth_cm <- factor(sample_data(ps)$Depth_cm, levels = c("0-15", "16-30", "31-45", "50-75"))
# Definir los colores para cada nivel de Depth_cm
depth_colors <- setNames(c("#f5e5c4", "#baa179", "#a67451", "#80673b"), levels(sample_data(ps)$Depth_cm))
print(depth_colors)
nmds_wu <- plot_ordination(ps, nmds_wunifrac, color = "Depth_cm") + theme_bw() +
labs(col = "Depth") +
labs(title="Weighted UniFrac") +
geom_point(size=5) + theme_bw() +
scale_fill_manual(values = depth_colors)+
scale_color_manual(values = depth_colors)#+
#scale_shape_manual(values = c(15, 16, 17))
nmds_wu <- nmds_wu +
annotate("text", x = Inf, y = -Inf, label = paste("Stress:", var_stress_nmds_wu),
hjust = 1.1, vjust = -1.1, size = 4)
# Añadir vectores al gráfico con nombres de taxones
nmds_wu <- nmds_wu +
geom_segment(data = top_asvs_scaledwu, aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.1, "cm")), color = "grey50") +
geom_text_repel(data = top_asvs_scaledwu, aes(x = NMDS1, y = NMDS2, label = Taxon),
color = "grey40", size = 3.5)
# Mostrar el gráfico
print(nmds_wu)
#permanova unifrac
library(phyloseq)
library(vegan)
# UniFrac
wunifrac_distances <- UniFrac(ps, weighted = TRUE)
# Convertir las distancias a un objeto de clase 'dist'
wunifrac_distances <- as.dist(wunifrac_distances)
# Realizar PERMANOVA usando adonis2 con la fórmula proporcionada
adonis2_wunifrac <- adonis2(wunifrac_distances ~ Location + Site + Depth_cm,
data = metadata, method = "euclidean",
permutations = 999, strata = metadata$ID)
print(adonis2_wunifrac)
# load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(gridExtra)
# Extract adonis2_unifrac
adonis_results_wu <- as.data.frame(adonis2_wunifrac)
# perMANOVA df results
permanova_results_wu <- data.frame(
Factor = rownames(adonis_results_wu)[1:4],
Df = adonis_results_wu$Df[1:4],
SumOfSqs = round(adonis_results_wu$SumOfSqs[1:4], 4),
R2 = round(adonis_results_wu$R2[1:4], 4),
F = round(adonis_results_wu$F[1:4], 4),
p_value = round(adonis_results_wu$`Pr(>F)`[1:4], 4)
)
# ggpubr::ggtexttable
permanova_table_wu <- ggtexttable(permanova_results_wu, rows = NULL, theme = ttheme("light"))
# Combine plots
combined_plot_wu <- plot_grid(nmds_wu,permanova_table_wu, ncol = 1, rel_heights = c(5,1))
# Mostrar el gráfico final
print(combined_plot_wu)
print(combined_plot_wu)
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 8.5, height = 8, bg='transparent')
#phylogenetic
library(ggplot2)
library(ggsci)
library(phyloseq)
library(vegan)
library(ggrepel)
# NMDS wu
nmds_wunifrac <- ordinate(ps, method = "NMDS", distance = "wunifrac")
# stress variable
var_stress_nmds_wu <- round(nmds_wunifrac$stress, 5)
var_stress_nmds_wu
# Calcular los vectores de ASVs usando envfit
asv_matrix <- as(otu_table(ps), "matrix")
asv_matrix <- t(asv_matrix) #
#envfit_resultwu <- envfit(nmds_wunifrac, asv_matrix, permutations = 999)
# Extraer los 10 ASVs más significativos
top_asvswu <- scores(envfit_resultwu, display = "vectors")
top_asvswu <- top_asvswu[order(envfit_resultwu$vectors$r), ][1:16, ]
top_asvswu
# Escalar los vectores para hacerlos más visibles
scale_factor <- 1
top_asvs_scaledwu <- top_asvswu * scale_factor
top_asvs_scaledwu <- as.data.frame(top_asvs_scaledwu)
top_asvs_scaledwu$ASV <- rownames(top_asvs_scaledwu)
# Obtener la taxonomía de los ASVs
tax_table <- as.data.frame(tax_table(ps))
tax_table$ASV <- rownames(tax_table$Family)
# Verificar la estructura en tax_table
tax_table_subsetwu <- tax_table(ps)[rownames(top_asvswu), ]
tax_table_subsetwu <- as.data.frame(tax_table_subsetwu)
print(tax_table_subsetwu)
# Extraer los nombres de los taxones de nivel más bajo para los top 10 ASVs
top_asvs_scaledwu$Taxon <- (tax_table_subsetwu$Family)
# Verificar los nombres de taxones en top_asvs_scaled
print(top_asvs_scaledwu)
# Convertir Depth_cm en un factor con niveles definidos
sample_data(ps)$Depth_cm <- factor(sample_data(ps)$Depth_cm, levels = c("0-15", "16-30", "31-45", "50-75"))
# Definir los colores para cada nivel de Depth_cm
depth_colors <- setNames(c("#f5e5c4", "#baa179", "#a67451", "#80673b"), levels(sample_data(ps)$Depth_cm))
print(depth_colors)
nmds_wu <- plot_ordination(ps, nmds_wunifrac, color = "Depth_cm") + theme_bw() +
labs(col = "Depth") +
labs(title="Weighted UniFrac") +
geom_point(size=5) + theme_bw() +
scale_fill_manual(values = depth_colors)+
scale_color_manual(values = depth_colors)#+
#scale_shape_manual(values = c(15, 16, 17))
nmds_wu <- nmds_wu +
annotate("text", x = Inf, y = -Inf, label = paste("Stress:", var_stress_nmds_wu),
hjust = 1.1, vjust = -1.1, size = 4)
# Añadir vectores al gráfico con nombres de taxones
nmds_wu <- nmds_wu +
geom_segment(data = top_asvs_scaledwu, aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.1, "cm")), color = "grey50") +
geom_text_repel(data = top_asvs_scaledwu, aes(x = NMDS1, y = NMDS2, label = Taxon),
color = "grey40", size = 3.5)
# Mostrar el gráfico
print(nmds_wu)
#permanova unifrac
library(phyloseq)
library(vegan)
# UniFrac
wunifrac_distances <- UniFrac(ps, weighted = TRUE)
# Convertir las distancias a un objeto de clase 'dist'
wunifrac_distances <- as.dist(wunifrac_distances)
# Realizar PERMANOVA usando adonis2 con la fórmula proporcionada
adonis2_wunifrac <- adonis2(wunifrac_distances ~ Location + Site + Depth_cm,
data = metadata, method = "euclidean",
permutations = 999, strata = metadata$ID)
print(adonis2_wunifrac)
# load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(gridExtra)
# Extract adonis2_unifrac
adonis_results_wu <- as.data.frame(adonis2_wunifrac)
# perMANOVA df results
permanova_results_wu <- data.frame(
Factor = rownames(adonis_results_wu)[1:4],
Df = adonis_results_wu$Df[1:4],
SumOfSqs = round(adonis_results_wu$SumOfSqs[1:4], 4),
R2 = round(adonis_results_wu$R2[1:4], 4),
F = round(adonis_results_wu$F[1:4], 4),
p_value = round(adonis_results_wu$`Pr(>F)`[1:4], 4)
)
# ggpubr::ggtexttable
permanova_table_wu <- ggtexttable(permanova_results_wu, rows = NULL, theme = ttheme("light"))
# Combine plots
combined_plot_wu <- plot_grid(nmds_wu,permanova_table_wu, ncol = 1, rel_heights = c(5,1))
# Mostrar el gráfico final
print(combined_plot_wu)
combined_plot_wu
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 8.5, height = 9, bg='transparent')
#phylogenetic
library(ggplot2)
library(ggsci)
library(phyloseq)
library(vegan)
library(ggrepel)
# NMDS wu
nmds_wunifrac <- ordinate(ps, method = "NMDS", distance = "wunifrac")
# stress variable
var_stress_nmds_wu <- round(nmds_wunifrac$stress, 5)
var_stress_nmds_wu
# Calcular los vectores de ASVs usando envfit
asv_matrix <- as(otu_table(ps), "matrix")
asv_matrix <- t(asv_matrix) #
#envfit_resultwu <- envfit(nmds_wunifrac, asv_matrix, permutations = 999)
# Extraer los 10 ASVs más significativos
top_asvswu <- scores(envfit_resultwu, display = "vectors")
top_asvswu <- top_asvswu[order(envfit_resultwu$vectors$r), ][1:12, ]
top_asvswu
# Escalar los vectores para hacerlos más visibles
scale_factor <- 1
top_asvs_scaledwu <- top_asvswu * scale_factor
top_asvs_scaledwu <- as.data.frame(top_asvs_scaledwu)
top_asvs_scaledwu$ASV <- rownames(top_asvs_scaledwu)
# Obtener la taxonomía de los ASVs
tax_table <- as.data.frame(tax_table(ps))
tax_table$ASV <- rownames(tax_table$Family)
# Verificar la estructura en tax_table
tax_table_subsetwu <- tax_table(ps)[rownames(top_asvswu), ]
tax_table_subsetwu <- as.data.frame(tax_table_subsetwu)
print(tax_table_subsetwu)
# Extraer los nombres de los taxones de nivel más bajo para los top 10 ASVs
top_asvs_scaledwu$Taxon <- (tax_table_subsetwu$Family)
# Verificar los nombres de taxones en top_asvs_scaled
print(top_asvs_scaledwu)
# Convertir Depth_cm en un factor con niveles definidos
sample_data(ps)$Depth_cm <- factor(sample_data(ps)$Depth_cm, levels = c("0-15", "16-30", "31-45", "50-75"))
# Definir los colores para cada nivel de Depth_cm
depth_colors <- setNames(c("#f5e5c4", "#baa179", "#a67451", "#80673b"), levels(sample_data(ps)$Depth_cm))
print(depth_colors)
nmds_wu <- plot_ordination(ps, nmds_wunifrac, color = "Depth_cm") + theme_bw() +
labs(col = "Depth") +
labs(title="Weighted UniFrac") +
geom_point(size=5) + theme_bw() +
scale_fill_manual(values = depth_colors)+
scale_color_manual(values = depth_colors)#+
#scale_shape_manual(values = c(15, 16, 17))
nmds_wu <- nmds_wu +
annotate("text", x = Inf, y = -Inf, label = paste("Stress:", var_stress_nmds_wu),
hjust = 1.1, vjust = -1.1, size = 4)
# Añadir vectores al gráfico con nombres de taxones
nmds_wu <- nmds_wu +
geom_segment(data = top_asvs_scaledwu, aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.1, "cm")), color = "grey50") +
geom_text_repel(data = top_asvs_scaledwu, aes(x = NMDS1, y = NMDS2, label = Taxon),
color = "grey40", size = 3.5)
# Mostrar el gráfico
print(nmds_wu)
#permanova unifrac
library(phyloseq)
library(vegan)
# UniFrac
wunifrac_distances <- UniFrac(ps, weighted = TRUE)
# Convertir las distancias a un objeto de clase 'dist'
wunifrac_distances <- as.dist(wunifrac_distances)
# Realizar PERMANOVA usando adonis2 con la fórmula proporcionada
adonis2_wunifrac <- adonis2(wunifrac_distances ~ Location + Site + Depth_cm,
data = metadata, method = "euclidean",
permutations = 999, strata = metadata$ID)
print(adonis2_wunifrac)
# load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(gridExtra)
# Extract adonis2_unifrac
adonis_results_wu <- as.data.frame(adonis2_wunifrac)
# perMANOVA df results
permanova_results_wu <- data.frame(
Factor = rownames(adonis_results_wu)[1:4],
Df = adonis_results_wu$Df[1:4],
SumOfSqs = round(adonis_results_wu$SumOfSqs[1:4], 4),
R2 = round(adonis_results_wu$R2[1:4], 4),
F = round(adonis_results_wu$F[1:4], 4),
p_value = round(adonis_results_wu$`Pr(>F)`[1:4], 4)
)
# ggpubr::ggtexttable
permanova_table_wu <- ggtexttable(permanova_results_wu, rows = NULL, theme = ttheme("light"))
# Combine plots
combined_plot_wu <- plot_grid(nmds_wu,permanova_table_wu, ncol = 1, rel_heights = c(5,1))
# Mostrar el gráfico final
print(combined_plot_wu)
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 8.5, height = 9, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 9.5, height = 10, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 10, height = 10.5, bg='transparent')
#phylogenetic
library(ggplot2)
library(ggsci)
library(phyloseq)
library(vegan)
library(ggrepel)
# NMDS wu
nmds_wunifrac <- ordinate(ps, method = "NMDS", distance = "wunifrac")
# stress variable
var_stress_nmds_wu <- round(nmds_wunifrac$stress, 5)
var_stress_nmds_wu
# Calcular los vectores de ASVs usando envfit
asv_matrix <- as(otu_table(ps), "matrix")
asv_matrix <- t(asv_matrix) #
#envfit_resultwu <- envfit(nmds_wunifrac, asv_matrix, permutations = 999)
# Extraer los 10 ASVs más significativos
top_asvswu <- scores(envfit_resultwu, display = "vectors")
top_asvswu <- top_asvswu[order(envfit_resultwu$vectors$r), ][1:12, ]
top_asvswu
# Escalar los vectores para hacerlos más visibles
scale_factor <- 1.5
top_asvs_scaledwu <- top_asvswu * scale_factor
top_asvs_scaledwu <- as.data.frame(top_asvs_scaledwu)
top_asvs_scaledwu$ASV <- rownames(top_asvs_scaledwu)
# Obtener la taxonomía de los ASVs
tax_table <- as.data.frame(tax_table(ps))
tax_table$ASV <- rownames(tax_table$Family)
# Verificar la estructura en tax_table
tax_table_subsetwu <- tax_table(ps)[rownames(top_asvswu), ]
tax_table_subsetwu <- as.data.frame(tax_table_subsetwu)
print(tax_table_subsetwu)
# Extraer los nombres de los taxones de nivel más bajo para los top 10 ASVs
top_asvs_scaledwu$Taxon <- (tax_table_subsetwu$Family)
# Verificar los nombres de taxones en top_asvs_scaled
print(top_asvs_scaledwu)
# Convertir Depth_cm en un factor con niveles definidos
sample_data(ps)$Depth_cm <- factor(sample_data(ps)$Depth_cm, levels = c("0-15", "16-30", "31-45", "50-75"))
# Definir los colores para cada nivel de Depth_cm
depth_colors <- setNames(c("#f5e5c4", "#baa179", "#a67451", "#80673b"), levels(sample_data(ps)$Depth_cm))
print(depth_colors)
nmds_wu <- plot_ordination(ps, nmds_wunifrac, color = "Depth_cm") + theme_bw() +
labs(col = "Depth") +
labs(title="Weighted UniFrac") +
geom_point(size=5) + theme_bw() +
scale_fill_manual(values = depth_colors)+
scale_color_manual(values = depth_colors)#+
#scale_shape_manual(values = c(15, 16, 17))
nmds_wu <- nmds_wu +
annotate("text", x = Inf, y = -Inf, label = paste("Stress:", var_stress_nmds_wu),
hjust = 1.1, vjust = -1.1, size = 4)
# Añadir vectores al gráfico con nombres de taxones
nmds_wu <- nmds_wu +
geom_segment(data = top_asvs_scaledwu, aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.1, "cm")), color = "grey50") +
geom_text_repel(data = top_asvs_scaledwu, aes(x = NMDS1, y = NMDS2, label = Taxon),
color = "grey40", size = 3.5)
# Mostrar el gráfico
print(nmds_wu)
#permanova unifrac
library(phyloseq)
library(vegan)
# UniFrac
wunifrac_distances <- UniFrac(ps, weighted = TRUE)
# Convertir las distancias a un objeto de clase 'dist'
wunifrac_distances <- as.dist(wunifrac_distances)
# Realizar PERMANOVA usando adonis2 con la fórmula proporcionada
adonis2_wunifrac <- adonis2(wunifrac_distances ~ Location + Site + Depth_cm,
data = metadata, method = "euclidean",
permutations = 999, strata = metadata$ID)
print(adonis2_wunifrac)
# load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(gridExtra)
# Extract adonis2_unifrac
adonis_results_wu <- as.data.frame(adonis2_wunifrac)
# perMANOVA df results
permanova_results_wu <- data.frame(
Factor = rownames(adonis_results_wu)[1:4],
Df = adonis_results_wu$Df[1:4],
SumOfSqs = round(adonis_results_wu$SumOfSqs[1:4], 4),
R2 = round(adonis_results_wu$R2[1:4], 4),
F = round(adonis_results_wu$F[1:4], 4),
p_value = round(adonis_results_wu$`Pr(>F)`[1:4], 4)
)
# ggpubr::ggtexttable
permanova_table_wu <- ggtexttable(permanova_results_wu, rows = NULL, theme = ttheme("light"))
# Combine plots
combined_plot_wu <- plot_grid(nmds_wu,permanova_table_wu, ncol = 1, rel_heights = c(5,1))
# Mostrar el gráfico final
print(combined_plot_wu)
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 10, height = 10.5, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 9, height = 9, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 9.5, height = 9, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 10, height = 9, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 10.5, height = 9.5, bg='transparent')
ggsave("../results/plots/nmds_wunifrac_permanova.pdf", plot = combined_plot_wu,  width = 10.5, height = 9, bg='transparent')
